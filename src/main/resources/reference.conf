akka {
      io {
          sctp {

            # The number of selectors to stripe the served channels over; each of
            # these will use one select loop on the selector-dispatcher.
            nr-of-selectors = 1

            # Maximum number of open channels supported by this SCTP module; there is
            # no intrinsic general limit, this setting is meant to enable DoS
            # protection by limiting the number of concurrently connected clients.
            # Also note that this is a "soft" limit; in certain cases the implementation
            # will accept a few connections more or a few less than the number configured
            # here. Must be an integer > 0 or "unlimited".
            max-channels = 256000

            # When trying to assign a new connection to a selector and the chosen
            # selector is at full capacity, retry selector choosing and assignment
            # this many times before giving up
            selector-association-retries = 10

            # The maximum number of connection that are accepted in one go,
            # higher numbers decrease latency, lower numbers increase fairness on
            # the worker-dispatcher
            batch-accept-limit = 10

            # The number of bytes per direct buffer in the pool used to read or write
            # network data from the kernel.
            direct-buffer-size = 64kB

            # The maximal number of direct buffers kept in the direct buffer pool for
            # reuse.
            direct-buffer-pool-limit = 1000

            # The duration a connection actor waits for a `Register` message from
            # its commander before aborting the connection.
            register-timeout = 5s

            # The maximum number of bytes delivered by a `Received` message. Before
            # more data is read from the network the connection actor will try to
            # do other work.
            # The purpose of this setting is to impose a smaller limit than the 
            # configured receive buffer size. When using value 'unlimited' it will
            # try to read all from the receive buffer.
            max-received-message-size = unlimited

            # Enable fine grained logging of what goes on inside the implementation.
            # Be aware that this may log more than once per message sent to the actors
            # of the tcp implementation.
            trace-logging = off

            # Fully qualified config path which holds the dispatcher configuration
            # to be used for running the select() calls in the selectors
            selector-dispatcher = "akka.io.pinned-dispatcher"

            # Fully qualified config path which holds the dispatcher configuration
            # for the read/write worker actors
            worker-dispatcher = "akka.actor.default-dispatcher"

            # Fully qualified config path which holds the dispatcher configuration
            # for the selector management actors
            management-dispatcher = "akka.actor.default-dispatcher"

            # Fully qualified config path which holds the dispatcher configuration
            # on which file IO tasks are scheduled
            file-io-dispatcher = "akka.actor.default-dispatcher"

            # The maximum number of bytes (or "unlimited") to transfer in one batch
            # when using `WriteFile` command which uses `FileChannel.transferTo` to
            # pipe files to a SCTP socket. On some OS like Linux `FileChannel.transferTo`
            # may block for a long time when network IO is faster than file IO.
            # Decreasing the value may improve fairness while increasing may improve
            # throughput.
            file-io-transferTo-limit = 512 KiB

            # The number of times to retry the `finishConnect` call after being notified about
            # OP_CONNECT. Retries are needed if the OP_CONNECT notification doesn't imply that
            # `finishConnect` will succeed, which is the case on Android.
            finish-connect-retries = 5

            # On Windows connection aborts are not reliably detected unless an OP_READ is
            # registered on the selector _after_ the connection has been reset. This
            # workaround enables an OP_CONNECT which forces the abort to be visible on Windows.
            # Enabling this setting on other platforms than Windows will cause various failures
            # and undefined behavior.
            # Possible values of this key are on, off and auto where auto will enable the
            # workaround if Windows is detected automatically.
            windows-connection-abort-workaround-enabled = off

            allow-chaining-reads = on
            allow-chaining-writes = off
          }
      }
}